#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.2
# from lexical definition file "SBQL.rex".
#++

require 'racc/parser'
require "lib/AST/AbstractMethodException"
require "lib/AST/AllExpression"
require "lib/AST/AndExpression"
require "lib/AST/AnyExpression"
require "lib/AST/AsExpression"
require "lib/AST/BagExpression"
require "lib/AST/BinaryExpression"
require "lib/AST/BooleanTerminal"
require "lib/AST/CommaExpression"
require "lib/AST/DifferentExpression"
require "lib/AST/DivideExpression"
require "lib/AST/DotExpression"
require "lib/AST/EqualExpression"
require "lib/AST/Expression"
require "lib/AST/FloatTerminal"
require "lib/AST/GreatherEqualExpression"
require "lib/AST/GreatherExpression"
require "lib/AST/GroupAsExpression"
require "lib/AST/IncorrectArgumentException"
require "lib/AST/IntegerTerminal"
require "lib/AST/IntersectExpression"
require "lib/AST/LessEqualExpression"
require "lib/AST/LessExpression"
require "lib/AST/MinusExpression"
require "lib/AST/ModuloExpression"
require "lib/AST/MultiplyExpression"
require "lib/AST/NameExpression"
require "lib/AST/OrExpression"
require "lib/AST/PlusExpression"
require "lib/AST/StringTerminal"
require "lib/AST/StructExpression"
require "lib/AST/TerminalExpression"
require "lib/AST/UnaryExpression"
require "lib/AST/UnionExpression"
require "lib/AST/UniqueExpression"
require "lib/AST/Utils"
require "lib/AST/WhereExpression"
require "lib/AST/SetMinusExpression"
require "lib/AST/InExpression"

include AST

class SBQLParser < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader :lineno
  attr_reader :filename

  def scan_setup ; end

  def action &block
    yield
  end

  def scan_str( str )
    scan_evaluate  str
    do_parse
  end

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_evaluate  f.read
    end
  end

  def scan_file( filename )
    load_file  filename
    do_parse
  end

  def next_token
    @rex_tokens.shift
  end

  def scan_evaluate( str )
    scan_setup
    @rex_tokens = []
    @lineno  =  1
    ss = StringScanner.new(str)
    state = nil
    until ss.eos?
      text = ss.peek(1)
      @lineno  +=  1  if text == "\n"
      case state
      when nil
        case
        when (text = ss.scan(/\s+/i))
          ;

        when (text = ss.scan(/\r|\n|\r\n/i))
          ;

        when (text = ss.scan(/true|false/i))
           @rex_tokens.push action { [:BOOLEAN_LITERAL, BooleanTerminal.new(text.downcase == "true")] }

        when (text = ss.scan(/[0-9]+\.[0-9]+/i))
           @rex_tokens.push action { [:DOUBLE_LITERAL, FloatTerminal.new(text.to_f)] }

        when (text = ss.scan(/[0-9]+/i))
           @rex_tokens.push action { [:INTEGER_LITERAL, IntegerTerminal.new(text.to_i)] }

        when (text = ss.scan(/[\"][^\"]*[\"]/i))
           @rex_tokens.push action { [:STRING_LITERAL, StringTerminal.new(text[1..-2])] }

        when (text = ss.scan(/[\'][^\"][\']/i))
           @rex_tokens.push action { [:CHAR_LITERAL, text] }

        when (text = ss.scan(/\+/i))
           @rex_tokens.push action { [:PLUS,nil] }

        when (text = ss.scan(/-/i))
           @rex_tokens.push action { [:MINUS,nil] }

        when (text = ss.scan(/\*/i))
           @rex_tokens.push action { [:MULTIPLY,nil] }

        when (text = ss.scan(/%/i))
           @rex_tokens.push action { [:MODULO,nil] }

        when (text = ss.scan(/\//i))
           @rex_tokens.push action { [:DIVIDE,nil] }

        when (text = ss.scan(/\(/i))
           @rex_tokens.push action { [:LEFT_ROUND_BRACKET,nil] }

        when (text = ss.scan(/\)/i))
           @rex_tokens.push action { [:RIGHT_ROUND_BRACKET,nil] }

        when (text = ss.scan(/,/i))
           @rex_tokens.push action { [:COMMA,nil] }

        when (text = ss.scan(/!=/i))
           @rex_tokens.push action { [:DIFFERENCE,nil] }

        when (text = ss.scan(/\./i))
           @rex_tokens.push action { [:DOT,nil] }

        when (text = ss.scan(/={1,2}/i))
           @rex_tokens.push action { [:EQUAL,nil] }

        when (text = ss.scan(/>=/i))
           @rex_tokens.push action { [:GREATEREQUAL,nil] }

        when (text = ss.scan(/>={0}/i))
           @rex_tokens.push action { [:GREATER,nil] }

        when (text = ss.scan(/\bjoin\b/i))
           @rex_tokens.push action { [:JOIN,nil] }

        when (text = ss.scan(/\border_by\b/i))
           @rex_tokens.push action { [:ORDERBY,nil] }

        when (text = ss.scan(/\bavg\b/i))
           @rex_tokens.push action { [:AVG, nil] }

        when (text = ss.scan(/<=/i))
           @rex_tokens.push action { [:SMALLEREQUAL,nil] }

        when (text = ss.scan(/<={0}/i))
           @rex_tokens.push action { [:SMALLER,nil] }

        when (text = ss.scan(/\bunion\b/i))
           @rex_tokens.push action { [:UNION,nil] }

        when (text = ss.scan(/\bunique\b/i))
           @rex_tokens.push action { [:UNIQUE,nil] }

        when (text = ss.scan(/\bintersect\b/i))
           @rex_tokens.push action { [:INTERSECT,nil] }

        when (text = ss.scan(/\bwhere\b/i))
           @rex_tokens.push action { [:WHERE,nil] }

        when (text = ss.scan(/\bany\b/i))
           @rex_tokens.push action { [:ANY,nil] }

        when (text = ss.scan(/\ball\b/i))
           @rex_tokens.push action { [:ALL,nil] }

        when (text = ss.scan(/\bin\b/i))
           @rex_tokens.push action { [:IN, nil] }

        when (text = ss.scan(/\bbag\b/i))
           @rex_tokens.push action { [:BAG,nil] }

        when (text = ss.scan(/\bexists\b/i))
           @rex_tokens.push action { [:EXISTS,nil] }

        when (text = ss.scan(/\bgroup\sas\b/i))
           @rex_tokens.push action { [:GROUPAS,nil] }

        when (text = ss.scan(/\bgroup\sas\b/i))
           @rex_tokens.push action { [:GROUPAS,nil] }

        when (text = ss.scan(/\bmax\b/i))
           @rex_tokens.push action { [:MAX,nil] }

        when (text = ss.scan(/\bmin\b/i))
           @rex_tokens.push action { [:MIN,nil] }

        when (text = ss.scan(/\bnot\b/i))
           @rex_tokens.push action { [:NOT,nil] }

        when (text = ss.scan(/\bpickrandom\b/i))
           @rex_tokens.push action { [:PICKRANDOM,nil] }

        when (text = ss.scan(/\bstruct\b/i))
           @rex_tokens.push action { [:STRUCT,nil] }

        when (text = ss.scan(/\bsum\b/i))
           @rex_tokens.push action { [:SUM,nil] }

        when (text = ss.scan(/\bas\b/i))
           @rex_tokens.push action { [:AS,nil] }

        when (text = ss.scan(/\band\b/i))
           @rex_tokens.push action { [:AND,nil] }

        when (text = ss.scan(/\bor\b/i))
           @rex_tokens.push action { [:OR,nil] }

        when (text = ss.scan(/\bsubstract\b/i))
           @rex_tokens.push action { [:SET_MINUS,nil] }

        when (text = ss.scan(/[0-9a-zA-Z_]*/i))
           @rex_tokens.push action { [:NAME, text] }

        when (text = ss.scan(/./i))
           @rex_tokens.push action { [text, text] }

        else
          text = ss.string[ss.pos .. -1]
          raise  ScanError, "can not match: '" + text + "'"
        end  # if

      else
        raise  ScanError, "undefined state: '" + state.to_s + "'"
      end  # case state
    end  # until ss
  end  # def scan_evaluate

end # class
