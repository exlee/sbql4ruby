
class SBQLParser

prechigh
left LEFT_ROUND_BRACKET RIGHT_ROUND_BRACKET
nonassoc MAX MIN NOT PICKRANDOM  STRUCT BAG SUM


left SET_MINUS INTERSECT UNION ANY ALL EXISTS
left DIVIDE MODULO MULTIPLY
left AND OR PLUS MINUS
left IN

left AS GROUPAS
left JOIN

left DOT COMMA ORDERBY
left EQUAL GREATEREQUAL GREATER SMALLEREQUAL SMALLER DIFFERENCE
left WHERE
preclow
rule
    target   : expr

    expr      : expr COMMA expr { result = CommaExpression.new(val[0],val[2]) }
    |   expr_without_coma { result = e }
	  |	  LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET { result = StructExpression.new(val[1]) }
    |   ANY expr expr { result = AnyExpression.new(val[1],val[2]) }
    |   expr AS NAME  { result = AsExpression.new(val[0], val[2]) }
    |   ALL expr expr { result = AllExpression.new(val[0],val[2]) }
    |   AVG expr {result = AvgExpression.new(val[1]) }
    |   expr DIFFERENCE expr { result = DifferentExpression.new(val[0],val[2]) }
    |   expr DOT expr { result = DotExpression.new(val[0],val[2]) }
    |   expr EQUAL expr { result = EqualExpression.new(val[0],val[2]) }
    |   expr GREATEREQUAL expr { result = GreatherEqualExpression.new(val[0],val[2]) }
    |   expr GREATER expr { result = GreatherExpression.new(val[0],val[2]) }
    |   expr JOIN expr { result = JoinExpression.new(val[0],val[2]) }
    |   expr ORDERBY expr { result = OrderByExpression.new(val[0],val[2]) }
    |   expr SMALLEREQUAL expr { result = LessEqualExpression.new(val[0],val[2]) }
    |   expr SMALLER expr { result = LessExpression.new(val[0],val[2]) }
    |   expr UNION expr { result = UnionExpression.new(val[0],val[2]) }
    |   expr SET_MINUS expr { result = SetMinusExpression.new(val[0], val[2]) }
    |   expr IN expr { result = InExpression.new(val[0], val[2])}
    |   expr INTERSECT expr { result = IntersectExpression.new(val[0],val[2]) }
    |   expr WHERE expr { result = WhereExpression.new(val[0],val[2]) }
    |   BAG expr { result = BagExpression.new(val[1]) }
    |   EXISTS expr { result = ExistsExpression.new(val[1]) }
    |   MAX expr { result = MaxExpression.new(val[1]) }
    |   MIN expr { result = MinExpression.new(val[1]) }
    |   UNIQUE expr { result = new UniqueExpression(val[1]) }
    |   expr GROUPAS NAME { result = GroupAsExpression.new(val[0], val[2]) }
    |   INTEGER_LITERAL  { result = (val[0]) }
    |   DOUBLE_LITERAL  { result = (val[0]) }
    |   STRING_LITERAL  { result = (val[0]) }
    |   BOOLEAN_LITERAL  { result = (val[0]) }
    |   NAME  { result = NameExpression.new(val[0])}
    |   NOT expr   { result = NotExpression.new(val[1])  }
    |   SUM expr   { result = SumExpression.new(val[1])  }
    |   PICKRANDOM expr   { result = PickRandomExpression.new(val[1])  }
    |   STRUCT expr { result = StructExpression.new(val[1]) }
    |   expr PLUS expr { result = PlusExpression.new(val[0], val[2]) }
    |   expr MINUS expr { result = MinusExpression.new(val[0],val[2]) }
    |   expr MULTIPLY expr { result = MultiplyExpression.new(val[0],val[2]) }
    |   expr MODULO expr { result = ModuloExpression.new(val[0],val[2]) }
    |   expr DIVIDE expr { result = DivideExpression.new(val[0],val[2]) }
    |   expr AND expr { result = AndExpression.new(val[0],val[2]) }
    |   expr OR expr { result = OrExpression.new(val[0],val[2]) }
---- header ----
#
# generated by racc
#
require "lib/AST/AbstractMethodException"
require "lib/AST/AllExpression"
require "lib/AST/AndExpression"
require "lib/AST/AnyExpression"
require "lib/AST/AsExpression"
require "lib/AST/BagExpression"
require "lib/AST/BinaryExpression"
require "lib/AST/BooleanTerminal"
require "lib/AST/CommaExpression"
require "lib/AST/DifferentExpression"
require "lib/AST/DivideExpression"
require "lib/AST/DotExpression"
require "lib/AST/EqualExpression"
require "lib/AST/Expression"
require "lib/AST/FloatTerminal"
require "lib/AST/GreatherEqualExpression"
require "lib/AST/GreatherExpression"
require "lib/AST/GroupAsExpression"
require "lib/AST/IncorrectArgumentException"
require "lib/AST/IntegerTerminal"
require "lib/AST/InExpression"
require "lib/AST/IntersectExpression"
require "lib/AST/LessEqualExpression"
require "lib/AST/LessExpression"
require "lib/AST/MinusExpression"
require "lib/AST/ModuloExpression"
require "lib/AST/MultiplyExpression"
require "lib/AST/NameExpression"
require "lib/AST/OrExpression"
require "lib/AST/PlusExpression"
require "lib/AST/StringTerminal"
require "lib/AST/StructExpression"
require "lib/AST/TerminalExpression"
require "lib/AST/UnaryExpression"
require "lib/AST/UnionExpression"
require "lib/AST/UniqueExpression"
require "lib/AST/Utils"
require "lib/AST/WhereExpression"
require "lib/AST/SetMinusExpression"

require 'lib/Parser/SBQL.rex'

include AST
