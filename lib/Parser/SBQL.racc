
class SBQLParser

prechigh
left COMMA
left WHERE
left ANY JOIN  UNION  INTERSECT ALL  EXISTS  GROUPAS  MAX  MIN  NAME  NOT  PICKRANDOM  SUM  AS DIFFERENCE
left EQUAL GREATEREQUAL  GREATER  SMALLEREQUAL  SMALLER
left AND OR
left MULTIPLY  DIVIDE  MODULO 
left PLUS  MINUS 
left LEFT_ROUND_BRACKET  RIGHT_ROUND_BRACKET
left STRUCT BAG
left DOT
left ORDERBY
preclow

rule
    target   : expr

    expr      : expr COMMA expr { result = new CommaExpression(e1,e2) }
    |   expr_without_coma { result = e }
	|	LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET { result = val[1] }
    |   ANY expr expr { result = new AnyExpression(val[0],val[2]) }
    |   ALL expr expr { result = AllExpression.new(val[0],val[2]) }
    |   expr DIFFERENCE expr { result = DifferentExpression.new(val[0],val[2]) }
    |   expr DOT expr { result = DotExpression.new(val[0],val[2]) }
    |   expr EQUAL expr { result = EqualExpression.new(val[0],val[2]) }
    |   expr GREATEREQUAL expr { result = GreaterEqualExpression.new(val[0],val[2]) }
    |   expr GREATER expr { result = GreaterExpression.new(val[0],val[2]) }
    |   expr JOIN expr { result = JoinExpression.new(val[0],val[2]) }
    |   expr ORDERBY expr { result = OrderByExpression.new(val[0],val[2]) }
    |   expr SMALLEREQUAL expr { result = SmallerEqualExpression.new(val[0],val[2]) }
    |   expr SMALLER expr { result = SmallerExpression.new(val[0],val[2]) }
    |   expr UNION expr { result = UnionExpression.new(val[0],val[2]) }
    |   expr INTERSECT expr { result = IntersectExpression.new(val[0],val[2]) }
    |   expr WHERE expr { result = WhereExpression.new(val[0],val[2]) }
    |   BAG expr { result = BagExpression.new(val[1]) }
    |   EXISTS expr { result = ExistsExpression.new(val[1]) }
    |   MAX expr { result = MaxExpression.new(val[1]) }
    |   MIN expr { result = MinExpression.new(val[1]) }
    |   UNIQUE expr { result = new UniqueExpression(val[1]) }
    |   expr AS NAME { result = new AsExpression(val[0], val[2]) }
    |   expr GROUPAS NAME { result = new GroupAsExpression(val[0], val[2]) }
    |   INTEGER_LITERAL  { result = (val[0]) }
    |   DOUBLE_LITERAL  { result = (val[0]) }
    |   STRING_LITERAL  { result = (val[0]) }
    |   BOOLEAN_LITERAL  { result = (val[0]) }
    |   NAME  { result = NameExpression.new(val[0])}
    |   NOT expr   { result = NotExpression.new(val[1])  }
    |   SUM expr   { result = SumExpression.new(val[1])  }
    |   PICKRANDOM expr   { result = PickRandomExpression.new(val[1])  }
    |   STRUCT expr { result = StructExpression.new(val[1]) }
    |   expr PLUS expr { result = PlusExpression.new(val[0], val[2]) }
    |   expr MINUS expr { result = MinusExpression.new(val[0],val[2]) }
    |   expr MULTIPLY expr { result = MultiplyExpression.new(val[0],val[2]) }
    |   expr MODULO expr { result = ModuloExpression.new(val[0],val[2]) }
    |   expr DIVIDE expr { result = DivisionExpression.new(val[0],val[2]) }
    |   expr AND expr { result = AndExpression.new(val[0],val[2]) }
    |   expr OR expr { result = OrExpression.new(val[0],val[2]) }
---- header ----
#
# generated by racc
#
require "lib/AST/AbstractMethodException"
require "lib/AST/AllExpression"
require "lib/AST/AndExpression"
require "lib/AST/AnyExpression"
require "lib/AST/AsExpression"
require "lib/AST/BagExpression"
require "lib/AST/BinaryExpression"
require "lib/AST/BooleanTerminal"
require "lib/AST/CommaExpression"
require "lib/AST/DifferentExpression"
require "lib/AST/DivideExpression"
require "lib/AST/DotExpression"
require "lib/AST/EqualExpression"
require "lib/AST/Expression"
require "lib/AST/FloatTerminal"
require "lib/AST/GreatherEqualExpression"
require "lib/AST/GreatherExpression"
require "lib/AST/GroupAsExpression"
require "lib/AST/IncorrectArgumentException"
require "lib/AST/IntegerTerminal"
require "lib/AST/IntersectExpression"
require "lib/AST/LessEqualExpression"
require "lib/AST/LessExpression"
require "lib/AST/MinusExpression"
require "lib/AST/ModuloExpression"
require "lib/AST/MultiplyExpression"
require "lib/AST/NameExpression"
require "lib/AST/OrExpression"
require "lib/AST/PlusExpression"
require "lib/AST/StringTerminal"
require "lib/AST/StructExpression"
require "lib/AST/TerminalExpression"
require "lib/AST/UnaryExpression"
require "lib/AST/UnionExpression"
require "lib/AST/UniqueExpression"
require "lib/AST/Utils"
require "lib/AST/WhereExpression"

require 'lib/Parser/SBQL.rex'

include AST
